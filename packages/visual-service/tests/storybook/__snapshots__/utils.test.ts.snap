// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Storybook utils > capabilitiesErrorMessage > should throw an error when both unsupported browsers and devices are provided 1`] = `"No capabilities were added. Please ensure that the browsers 'chrome,safari' and devices 'Unknown Device' are supported."`;

exports[`Storybook utils > capabilitiesErrorMessage > should throw an error when nothing is provided 1`] = `"No capabilities were added. Please ensure that the specified configuration is correct."`;

exports[`Storybook utils > capabilitiesErrorMessage > should throw an error when unsupported browsers are provided 1`] = `"No capabilities were added. Please ensure that the browsers 'chrome,safari' are supported."`;

exports[`Storybook utils > capabilitiesErrorMessage > should throw an error when unsupported devices are provided 1`] = `"No capabilities were added. Please ensure that the devices 'iPhone 14,Unknown Device' are supported."`;

exports[`Storybook utils > checkStorybookIsRunning > should throw an error if storybook is not running 1`] = `
[MockFunction spy] {
  "calls": [
    [
      "It seems that the Storybook instance is not running at: https://not.running.it. Are you sure it's running?",
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Storybook utils > createChromeCapabilityWithEmulation > should create a Chrome capability with mobile emulation for a given device and headless mode 1`] = `
{
  "browserName": "chrome",
  "goog:chromeOptions": {
    "args": [
      "disable-infobars",
      "--headless",
    ],
    "mobileEmulation": {
      "deviceMetrics": {
        "height": 2532,
        "pixelRatio": 3,
        "width": 1170,
      },
      "userAgent": "some-user-agent-string-for-iPhone",
    },
  },
  "wdio-ics:options": {
    "logName": "local-chrome-iPhone-14-Pro",
  },
}
`;

exports[`Storybook utils > createChromeCapabilityWithEmulation > should create a Chrome capability with mobile emulation for a given device in non-headless mode 1`] = `
{
  "browserName": "chrome",
  "goog:chromeOptions": {
    "args": [
      "disable-infobars",
    ],
    "mobileEmulation": {
      "deviceMetrics": {
        "height": 2340,
        "pixelRatio": 2.5,
        "width": 1080,
      },
      "userAgent": "some-user-agent-string-for-Pixel",
    },
  },
  "wdio-ics:options": {
    "logName": "local-chrome-Pixel-7",
  },
}
`;

exports[`Storybook utils > createFileData > formats test content correctly for standard inputs 1`] = `
"
describe(\`My Test Suite\`, () => {
    it("does something", () => {});
});
"
`;

exports[`Storybook utils > createFileData > handles empty describe title and test content 1`] = `
"
describe(\`\`, () => {
    
});
"
`;

exports[`Storybook utils > createFileData > handles special characters in describe title and test content 1`] = `
"
describe(\`Special\`Characters\`, () => {
    it("handles \`special\` characters", () => {});
});
"
`;

exports[`Storybook utils > createStorybookCapabilities > logs an error if capabilities are not an array 1`] = `
[MockFunction spy] {
  "calls": [
    [
      "The capabilities are not an array",
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Storybook utils > createTestContent > calls itFunction with correct arguments for each story and accumulates results 1`] = `
"Test for example-button--primary
Test for example-button--secondary
Test for example-button--large
"
`;

exports[`Storybook utils > itFunction > generates correct mocha test code with non skipped regex 1`] = `
"
    it(\`should take a viewport screenshot of category-component--story1\`, async () => {
        await browser.waitForStorybookComponentToBeLoaded({
            clipSelector: '#id',
            id: 'category-component--story1',
            storybookUrl: 'http://storybook.com/',
            additionalSearchParams: new URLSearchParams('foo=bar'),
        });
        await expect(browser).toMatchScreenSnapshot('category-component--story1', {"ignoreLess":true,"baselineFolder":"baseline/category/component/"})
    });
    "
`;

exports[`Storybook utils > itFunction > generates correct mocha test code with skipped regex 1`] = `
"
    it.skip(\`should take a viewport screenshot of category-component--story1\`, async () => {
        await browser.waitForStorybookComponentToBeLoaded({
            clipSelector: '#id',
            id: 'category-component--story1',
            storybookUrl: 'http://storybook.com/',
            additionalSearchParams: new URLSearchParams('foo=bar'),
        });
        await expect(browser).toMatchScreenSnapshot('category-component--story1', {"ignoreLess":true,"baselineFolder":"baseline/category/component/"})
    });
    "
`;

exports[`Storybook utils > itFunction > generates correct test code with Jasmine framework and no skip array 1`] = `
"
    it(\`should take a viewport screenshot of category-component--story1\`, async () => {
        await browser.waitForStorybookComponentToBeLoaded({
            clipSelector: '#id',
            id: 'category-component--story1',
            storybookUrl: 'http://storybook.com/',
            additionalSearchParams: new URLSearchParams('foo=bar'),
        });
        await expect(browser).toMatchScreenSnapshot('category-component--story1', {"ignoreLess":true,"baselineFolder":"baseline/category/component/"})
    });
    "
`;

exports[`Storybook utils > itFunction > generates correct test code with Jasmine framework and skip array 1`] = `
"
    xit(\`should take a viewport screenshot of category-component--story1\`, async () => {
        await browser.waitForStorybookComponentToBeLoaded({
            clipSelector: '#id',
            id: 'category-component--story1',
            storybookUrl: 'http://storybook.com/',
            additionalSearchParams: new URLSearchParams('foo=bar'),
        });
        await expect(browser).toMatchScreenSnapshot('category-component--story1', {"ignoreLess":true,"baselineFolder":"baseline/category/component/"})
    });
    "
`;

exports[`Storybook utils > itFunction > generates correct test code with for a clipped test 1`] = `
"
    it(\`should take an element screenshot of category-component--story1\`, async () => {
        await browser.waitForStorybookComponentToBeLoaded({
            clipSelector: '#id',
            id: 'category-component--story1',
            storybookUrl: 'http://storybook.com/',
            additionalSearchParams: new URLSearchParams('foo=bar'),
        });
        await expect($('#id')).toMatchElementSnapshot('category-component--story1-element', {"ignoreLess":true,"baselineFolder":"baseline/category/component/"})
    });
    "
`;

exports[`Storybook utils > itFunction > generates correct test code with for a clipped test 2`] = `
"
    it(\`should take an element screenshot of category-component--story1\`, async () => {
        await browser.waitForStorybookComponentToBeLoaded({
            clipSelector: '#id',
            id: 'category-component--story1',
            storybookUrl: 'http://storybook.com/',
            additionalSearchParams: new URLSearchParams('foo=bar'),
        });
        await expect($('#id')).toMatchElementSnapshot('category-component--story1-element', {"ignoreLess":true,"baselineFolder":"baseline/category/component/"})
    });
    "
`;

exports[`Storybook utils > itFunction > generates correct test code with mocha framework and no skipped array 1`] = `
"
    it(\`should take a viewport screenshot of category-component--story1\`, async () => {
        await browser.waitForStorybookComponentToBeLoaded({
            clipSelector: '#id',
            id: 'category-component--story1',
            storybookUrl: 'http://storybook.com/',
            additionalSearchParams: new URLSearchParams('foo=bar'),
        });
        await expect(browser).toMatchScreenSnapshot('category-component--story1', {"ignoreLess":true,"baselineFolder":"baseline/category/component/"})
    });
    "
`;

exports[`Storybook utils > itFunction > generates correct test code with mocha framework and skip array 1`] = `
"
    it.skip(\`should take a viewport screenshot of category-component--story1\`, async () => {
        await browser.waitForStorybookComponentToBeLoaded({
            clipSelector: '#id',
            id: 'category-component--story1',
            storybookUrl: 'http://storybook.com/',
            additionalSearchParams: new URLSearchParams('foo=bar'),
        });
        await expect(browser).toMatchScreenSnapshot('category-component--story1', {"ignoreLess":true,"baselineFolder":"baseline/category/component/"})
    });
    "
`;

exports[`Storybook utils > parseSkipStories > logs an error and returns an array if skipStories is an invalid regex string 1`] = `
[MockFunction spy] {
  "calls": [
    [
      "Invalid regular expression:",
      [SyntaxError: Invalid regular expression: /[unclosed-regex/: Unterminated character class],
      ". Not using a regular expression to skip stories.",
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Storybook utils > waitForStorybookComponentToBeLoaded > should throw an error if storybook mode is not enabled 1`] = `"The method \`waitForStorybookComponentToBeLoaded\` can only be used in Storybook mode."`;
