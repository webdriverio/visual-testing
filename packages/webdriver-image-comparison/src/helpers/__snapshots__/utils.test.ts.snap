// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`utils > calculateDprData > should multiple all number values by the dpr value 1`] = `
{
  "1": 6,
  "a": 2,
  "a1": 18,
  "b": 4,
  "bool": true,
  "string": "string",
}
`;

exports[`utils > checkAndroidChromeDriverScreenshot > should return false when Android and nativeWebscreenshot true is provided 1`] = `false`;

exports[`utils > checkAndroidChromeDriverScreenshot > should return false when iOS and nativeWebscreenshot false is provided 1`] = `false`;

exports[`utils > checkAndroidChromeDriverScreenshot > should return false when iOS and nativeWebscreenshot true is provided 1`] = `false`;

exports[`utils > checkAndroidChromeDriverScreenshot > should return false when no platform name is provided 1`] = `false`;

exports[`utils > checkAndroidChromeDriverScreenshot > should return true when Android and nativeWebscreenshot false is provided  1`] = `true`;

exports[`utils > checkAndroidNativeWebScreenshot > should return false when Android and nativeWebscreenshot false is provided 1`] = `false`;

exports[`utils > checkAndroidNativeWebScreenshot > should return false when iOS and nativeWebscreenshot false is provided 1`] = `false`;

exports[`utils > checkAndroidNativeWebScreenshot > should return false when iOS and nativeWebscreenshot true is provided 1`] = `false`;

exports[`utils > checkAndroidNativeWebScreenshot > should return false when no platform name is provided 1`] = `false`;

exports[`utils > checkAndroidNativeWebScreenshot > should return true when Android and nativeWebscreenshot true is provided  1`] = `true`;

exports[`utils > checkIsAndroid > should return false when a platform name is provided that is not accepted 1`] = `false`;

exports[`utils > checkIsAndroid > should return false when no platform name is provided 1`] = `false`;

exports[`utils > checkIsAndroid > should return true when a valid platform name is provided 1`] = `true`;

exports[`utils > checkIsIos > should return false when a platform name is provided that is not accepted 1`] = `false`;

exports[`utils > checkIsIos > should return false when no platform name is provided 1`] = `false`;

exports[`utils > checkIsIos > should return true when a valid platform name is provided 1`] = `true`;

exports[`utils > checkIsMobile > should return false when no platform name is provided 1`] = `false`;

exports[`utils > checkIsMobile > should return true when a platform name is provided 1`] = `true`;

exports[`utils > checkTestInBrowser > should return false when no browser name is provided 1`] = `false`;

exports[`utils > checkTestInBrowser > should return true when a browser name is provided 1`] = `true`;

exports[`utils > checkTestInMobileBrowser > should return false when a plaform but no browser name is provided 1`] = `false`;

exports[`utils > checkTestInMobileBrowser > should return false when no platform name is provided 1`] = `false`;

exports[`utils > checkTestInMobileBrowser > should return true when a plaform and a browser name is provided 1`] = `true`;

exports[`utils > formatFileName > should format a string for mobile app 1`] = `"theTag-app-2-1400x900.png"`;

exports[`utils > formatFileName > should format a string for mobile browser 1`] = `"theTag-chrome-2-1400x900.png"`;

exports[`utils > formatFileName > should format a string with all options provided 1`] = `"browser.chrome-74-platform.osx-12-dpr.2-768-chrome-latest-chrome-name-theTag-1366.png"`;

exports[`utils > getAddressBarShadowPadding > should return 0 when this is a check for Android with a native screenshot but without adding a shadow padding 1`] = `0`;

exports[`utils > getAddressBarShadowPadding > should return 0 when this is a check for a desktop browser 1`] = `0`;

exports[`utils > getAddressBarShadowPadding > should return 0 when this is a check for an Android app 1`] = `0`;

exports[`utils > getAddressBarShadowPadding > should return 0 when this is a check for an iOS app 1`] = `0`;

exports[`utils > getAddressBarShadowPadding > should return 0 when this is a check for iOS but without adding a shadow padding 1`] = `0`;

exports[`utils > getAddressBarShadowPadding > should return 6 when this is a check for Android with a native screenshot and adding a shadow padding 1`] = `6`;

exports[`utils > getAddressBarShadowPadding > should return 6 when this is a check for iOS and adding a shadow padding 1`] = `6`;

exports[`utils > getAndCreatePath > should create the folder and return the folder name for a browser 1`] = `false`;

exports[`utils > getAndCreatePath > should create the folder and return the folder name for a browser 2`] = `true`;

exports[`utils > getAndCreatePath > should create the folder and return the folder name for a browser that needs to have its own folder 1`] = `false`;

exports[`utils > getAndCreatePath > should create the folder and return the folder name for a browser that needs to have its own folder 2`] = `true`;

exports[`utils > getAndCreatePath > should create the folder and return the folder name for a device that needs to have its own folder 1`] = `false`;

exports[`utils > getAndCreatePath > should create the folder and return the folder name for a device that needs to have its own folder 2`] = `true`;

exports[`utils > getScreenshotSize > should get the screenshot size of a screenshot string with DRP 2 1`] = `
{
  "height": 768,
  "width": 1366,
}
`;

exports[`utils > getScreenshotSize > should get the screenshot size of a screenshot string with the default DPR 1`] = `
{
  "height": 1536,
  "width": 2732,
}
`;

exports[`utils > getToolBarShadowPadding > should return 0 when this is a check for Android browser and adding a shadow padding 1`] = `0`;

exports[`utils > getToolBarShadowPadding > should return 0 when this is a check for a desktop browser 1`] = `0`;

exports[`utils > getToolBarShadowPadding > should return 0 when this is a check for an Android app 1`] = `0`;

exports[`utils > getToolBarShadowPadding > should return 0 when this is a check for an Android app with adding a shadow padding 1`] = `0`;

exports[`utils > getToolBarShadowPadding > should return 0 when this is a check for an iOS app 1`] = `0`;

exports[`utils > getToolBarShadowPadding > should return 0 when this is a check for an iOS app with adding a shadow padding 1`] = `0`;

exports[`utils > getToolBarShadowPadding > should return 15 when this is a check for iOS browser and adding a shadow padding 1`] = `15`;

exports[`utils > logAllDeprecatedCompareOptions > should log all deprecated compare options 1`] = `
{
  "blockOutSideBar": true,
  "blockOutStatusBar": true,
  "blockOutToolBar": true,
  "createJsonReportFiles": true,
  "diffPixelBoundingBoxProximity": 5,
  "ignoreAlpha": true,
  "ignoreAntialiasing": true,
  "ignoreColors": true,
  "ignoreLess": true,
  "ignoreNothing": true,
  "rawMisMatchPercentage": true,
  "returnAllCompareData": true,
  "saveAboveTolerance": 100,
  "scaleImagesToSameSize": true,
}
`;
