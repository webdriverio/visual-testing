// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`utils > calculateDprData > should multiple all number values by the dpr value 1`] = `
{
  "1": 6,
  "a": 2,
  "a1": 18,
  "b": 4,
  "bool": true,
  "string": "string",
}
`;

exports[`utils > checkAndroidChromeDriverScreenshot > should return false when Android and nativeWebscreenshot true is provided 1`] = `false`;

exports[`utils > checkAndroidChromeDriverScreenshot > should return false when iOS and nativeWebscreenshot false is provided 1`] = `false`;

exports[`utils > checkAndroidChromeDriverScreenshot > should return false when iOS and nativeWebscreenshot true is provided 1`] = `false`;

exports[`utils > checkAndroidChromeDriverScreenshot > should return false when no platform name is provided 1`] = `false`;

exports[`utils > checkAndroidChromeDriverScreenshot > should return true when Android and nativeWebscreenshot false is provided  1`] = `true`;

exports[`utils > checkAndroidNativeWebScreenshot > should return false when Android and nativeWebscreenshot false is provided 1`] = `false`;

exports[`utils > checkAndroidNativeWebScreenshot > should return false when iOS and nativeWebscreenshot false is provided 1`] = `false`;

exports[`utils > checkAndroidNativeWebScreenshot > should return false when iOS and nativeWebscreenshot true is provided 1`] = `false`;

exports[`utils > checkAndroidNativeWebScreenshot > should return false when no platform name is provided 1`] = `false`;

exports[`utils > checkAndroidNativeWebScreenshot > should return true when Android and nativeWebscreenshot true is provided  1`] = `true`;

exports[`utils > checkIsAndroid > should return false when a platform name is provided that is not accepted 1`] = `false`;

exports[`utils > checkIsAndroid > should return false when no platform name is provided 1`] = `false`;

exports[`utils > checkIsAndroid > should return true when a valid platform name is provided 1`] = `true`;

exports[`utils > checkIsIos > should return false when a platform name is provided that is not accepted 1`] = `false`;

exports[`utils > checkIsIos > should return false when no platform name is provided 1`] = `false`;

exports[`utils > checkIsIos > should return true when a valid platform name is provided 1`] = `true`;

exports[`utils > checkIsMobile > should return false when no platform name is provided 1`] = `false`;

exports[`utils > checkIsMobile > should return true when a platform name is provided 1`] = `true`;

exports[`utils > checkTestInBrowser > should return false when no browser name is provided 1`] = `false`;

exports[`utils > checkTestInBrowser > should return true when a browser name is provided 1`] = `true`;

exports[`utils > checkTestInMobileBrowser > should return false when a plaform but no browser name is provided 1`] = `false`;

exports[`utils > checkTestInMobileBrowser > should return false when no platform name is provided 1`] = `false`;

exports[`utils > checkTestInMobileBrowser > should return true when a plaform and a browser name is provided 1`] = `true`;

exports[`utils > formatFileName > should format a string for mobile app 1`] = `"theTag-app-2-1400x900.png"`;

exports[`utils > formatFileName > should format a string for mobile browser 1`] = `"theTag-chrome-2-1400x900.png"`;

exports[`utils > formatFileName > should format a string with all options provided 1`] = `"browser.chrome-74-platform.osx-12-dpr.2-768-chrome-latest-chrome-name-theTag-1366.png"`;

exports[`utils > getAddressBarShadowPadding > should return 0 when this is a check for Android with a native screenshot but without adding a shadow padding 1`] = `0`;

exports[`utils > getAddressBarShadowPadding > should return 0 when this is a check for a desktop browser 1`] = `0`;

exports[`utils > getAddressBarShadowPadding > should return 0 when this is a check for an Android app 1`] = `0`;

exports[`utils > getAddressBarShadowPadding > should return 0 when this is a check for an iOS app 1`] = `0`;

exports[`utils > getAddressBarShadowPadding > should return 0 when this is a check for iOS but without adding a shadow padding 1`] = `0`;

exports[`utils > getAddressBarShadowPadding > should return 6 when this is a check for Android with a native screenshot and adding a shadow padding 1`] = `6`;

exports[`utils > getAddressBarShadowPadding > should return 6 when this is a check for iOS and adding a shadow padding 1`] = `6`;

exports[`utils > getAndCreatePath > should create the folder and return the folder name for a browser 1`] = `false`;

exports[`utils > getAndCreatePath > should create the folder and return the folder name for a browser 2`] = `true`;

exports[`utils > getAndCreatePath > should create the folder and return the folder name for a browser that needs to have its own folder 1`] = `false`;

exports[`utils > getAndCreatePath > should create the folder and return the folder name for a browser that needs to have its own folder 2`] = `true`;

exports[`utils > getAndCreatePath > should create the folder and return the folder name for a device that needs to have its own folder 1`] = `false`;

exports[`utils > getAndCreatePath > should create the folder and return the folder name for a device that needs to have its own folder 2`] = `true`;

exports[`utils > getBase64ScreenshotSize > should get the screenshot size of a screenshot string with DRP 2 1`] = `
{
  "height": 768,
  "width": 1366,
}
`;

exports[`utils > getBase64ScreenshotSize > should get the screenshot size of a screenshot string with the default DPR 1`] = `
{
  "height": 1536,
  "width": 2732,
}
`;

exports[`utils > getDevicePixelRatio > should return 1 when the screenshot width equals device screen width 1`] = `85`;

exports[`utils > getDevicePixelRatio > should return 2 when the screenshot width is double the device screen width 1`] = `171`;

exports[`utils > getDevicePixelRatio > should round the result to the nearest integer 1`] = `161`;

exports[`utils > getIosBezelImageNames > should return bezel image names for "ipadair" 1`] = `
{
  "bottomImageName": "ipadair4th.ipadair5th-bottom",
  "topImageName": "ipadair4th.ipadair5th-top",
}
`;

exports[`utils > getIosBezelImageNames > should return bezel image names for "ipadmini" 1`] = `
{
  "bottomImageName": "ipadmini6th-bottom",
  "topImageName": "ipadmini6th-top",
}
`;

exports[`utils > getIosBezelImageNames > should return bezel image names for "ipadpro11" 1`] = `
{
  "bottomImageName": "ipadpro11-bottom",
  "topImageName": "ipadpro11-top",
}
`;

exports[`utils > getIosBezelImageNames > should return bezel image names for "ipadpro129" 1`] = `
{
  "bottomImageName": "ipadpro129-bottom",
  "topImageName": "ipadpro129-top",
}
`;

exports[`utils > getIosBezelImageNames > should return bezel image names for "iphone11" 1`] = `
{
  "bottomImageName": "iphonexr.iphone11-bottom",
  "topImageName": "iphonexr.iphone11-top",
}
`;

exports[`utils > getIosBezelImageNames > should return bezel image names for "iphone11pro" 1`] = `
{
  "bottomImageName": "iphonex.iphonexs.iphone11pro-bottom",
  "topImageName": "iphonex.iphonexs.iphone11pro-top",
}
`;

exports[`utils > getIosBezelImageNames > should return bezel image names for "iphone11promax" 1`] = `
{
  "bottomImageName": "iphone11promax-bottom",
  "topImageName": "iphone11promax-top",
}
`;

exports[`utils > getIosBezelImageNames > should return bezel image names for "iphone12" 1`] = `
{
  "bottomImageName": "iphone12.iphone12pro.iphone13.iphone13pro.iphone14-bottom",
  "topImageName": "iphone12.iphone12pro-top",
}
`;

exports[`utils > getIosBezelImageNames > should return bezel image names for "iphone12mini" 1`] = `
{
  "bottomImageName": "iphone12mini.iphone13mini-bottom",
  "topImageName": "iphone12mini-top",
}
`;

exports[`utils > getIosBezelImageNames > should return bezel image names for "iphone12pro" 1`] = `
{
  "bottomImageName": "iphone12.iphone12pro.iphone13.iphone13pro.iphone14-bottom",
  "topImageName": "iphone12.iphone12pro-top",
}
`;

exports[`utils > getIosBezelImageNames > should return bezel image names for "iphone12promax" 1`] = `
{
  "bottomImageName": "iphone12promax.iphone13promax.iphone14plus-bottom",
  "topImageName": "iphone12promax-top",
}
`;

exports[`utils > getIosBezelImageNames > should return bezel image names for "iphone13" 1`] = `
{
  "bottomImageName": "iphone12.iphone12pro.iphone13.iphone13pro.iphone14-bottom",
  "topImageName": "iphone13.iphone13pro.iphone14-top",
}
`;

exports[`utils > getIosBezelImageNames > should return bezel image names for "iphone13mini" 1`] = `
{
  "bottomImageName": "iphone12mini.iphone13mini-bottom",
  "topImageName": "iphone13mini-top",
}
`;

exports[`utils > getIosBezelImageNames > should return bezel image names for "iphone13pro" 1`] = `
{
  "bottomImageName": "iphone12.iphone12pro.iphone13.iphone13pro.iphone14-bottom",
  "topImageName": "iphone13.iphone13pro.iphone14-top",
}
`;

exports[`utils > getIosBezelImageNames > should return bezel image names for "iphone13promax" 1`] = `
{
  "bottomImageName": "iphone12promax.iphone13promax.iphone14plus-bottom",
  "topImageName": "iphone13promax.iphone14plus-top",
}
`;

exports[`utils > getIosBezelImageNames > should return bezel image names for "iphone14" 1`] = `
{
  "bottomImageName": "iphone12.iphone12pro.iphone13.iphone13pro.iphone14-bottom",
  "topImageName": "iphone13.iphone13pro.iphone14-top",
}
`;

exports[`utils > getIosBezelImageNames > should return bezel image names for "iphone14plus" 1`] = `
{
  "bottomImageName": "iphone12promax.iphone13promax.iphone14plus-bottom",
  "topImageName": "iphone13promax.iphone14plus-top",
}
`;

exports[`utils > getIosBezelImageNames > should return bezel image names for "iphone14pro" 1`] = `
{
  "bottomImageName": "iphone14pro-bottom",
  "topImageName": "iphone14pro-top",
}
`;

exports[`utils > getIosBezelImageNames > should return bezel image names for "iphone14promax" 1`] = `
{
  "bottomImageName": "iphone14promax-bottom",
  "topImageName": "iphone14promax-top",
}
`;

exports[`utils > getIosBezelImageNames > should return bezel image names for "iphone15" 1`] = `
{
  "bottomImageName": "iphone15-bottom",
  "topImageName": "iphone15-top",
}
`;

exports[`utils > getIosBezelImageNames > should return bezel image names for "iphonex" 1`] = `
{
  "bottomImageName": "iphonex.iphonexs.iphone11pro-bottom",
  "topImageName": "iphonex.iphonexs.iphone11pro-top",
}
`;

exports[`utils > getIosBezelImageNames > should return bezel image names for "iphonexr" 1`] = `
{
  "bottomImageName": "iphonexr.iphone11-bottom",
  "topImageName": "iphonexr.iphone11-top",
}
`;

exports[`utils > getIosBezelImageNames > should return bezel image names for "iphonexs" 1`] = `
{
  "bottomImageName": "iphonex.iphonexs.iphone11pro-bottom",
  "topImageName": "iphonex.iphonexs.iphone11pro-top",
}
`;

exports[`utils > getIosBezelImageNames > should return bezel image names for "iphonexsmax" 1`] = `
{
  "bottomImageName": "iphonexsmax-bottom",
  "topImageName": "iphonexsmax-top",
}
`;

exports[`utils > getIosBezelImageNames > should throw an error for unsupported device names 1`] = `[Error: Could not find iOS bezel images for device unsupportedDevice]`;

exports[`utils > getMobileViewPortPosition > should return correct device rectangles for iOS WebView flow 1`] = `
{
  "bottomBar": {
    "height": 600,
    "width": 400,
    "x": 0,
    "y": 200,
  },
  "homeBar": {
    "height": 0,
    "width": 0,
    "x": 0,
    "y": 0,
  },
  "leftSidePadding": {
    "height": 100,
    "width": 50,
    "x": 0,
    "y": 100,
  },
  "rightSidePadding": {
    "height": 100,
    "width": 250,
    "x": 150,
    "y": 100,
  },
  "screenSize": {
    "height": 800,
    "width": 400,
  },
  "statusBar": {
    "height": 0,
    "width": 0,
    "x": 0,
    "y": 0,
  },
  "statusBarAndAddressBar": {
    "height": 100,
    "width": 400,
    "x": 0,
    "y": 0,
  },
  "viewport": {
    "height": 100,
    "width": 100,
    "x": 50,
    "y": 100,
  },
}
`;

exports[`utils > getToolBarShadowPadding > should return 0 when this is a check for Android browser and adding a shadow padding 1`] = `6`;

exports[`utils > getToolBarShadowPadding > should return 0 when this is a check for a desktop browser 1`] = `0`;

exports[`utils > getToolBarShadowPadding > should return 0 when this is a check for an Android app 1`] = `0`;

exports[`utils > getToolBarShadowPadding > should return 0 when this is a check for an Android app with adding a shadow padding 1`] = `0`;

exports[`utils > getToolBarShadowPadding > should return 0 when this is a check for an iOS app 1`] = `0`;

exports[`utils > getToolBarShadowPadding > should return 0 when this is a check for an iOS app with adding a shadow padding 1`] = `0`;

exports[`utils > getToolBarShadowPadding > should return 15 when this is a check for iOS browser and adding a shadow padding 1`] = `15`;

exports[`utils > logAllDeprecatedCompareOptions > should log a deprecation warning for each deprecated key 1`] = `
"The following root-level compare options are deprecated and should be moved under 'compareOptions':
  - blockOutSideBar
  - blockOutStatusBar
  - blockOutToolBar
  - createJsonReportFiles
  - diffPixelBoundingBoxProximity
  - ignoreAlpha
  - ignoreAntialiasing
  - ignoreColors
  - ignoreLess
  - ignoreNothing
  - rawMisMatchPercentage
  - returnAllCompareData
  - saveAboveTolerance
  - scaleImagesToSameSize
In the next major version, these options will be removed from the root level and only be available under 'compareOptions'"
`;

exports[`utils > logAllDeprecatedCompareOptions > should return a subset of CompareOptions with deprecated keys only 1`] = `
{
  "blockOutSideBar": true,
  "blockOutStatusBar": true,
  "blockOutToolBar": true,
  "createJsonReportFiles": true,
  "diffPixelBoundingBoxProximity": 5,
  "ignoreAlpha": true,
  "ignoreAntialiasing": true,
  "ignoreColors": true,
  "ignoreLess": true,
  "ignoreNothing": true,
  "rawMisMatchPercentage": true,
  "returnAllCompareData": true,
  "saveAboveTolerance": 100,
  "scaleImagesToSameSize": true,
}
`;
